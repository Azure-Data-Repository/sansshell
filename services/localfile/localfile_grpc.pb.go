// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package localfile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalFileClient is the client API for LocalFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalFileClient interface {
	// Read reads a file from the disk and returns it contents
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
}

type localFileClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalFileClient(cc grpc.ClientConnInterface) LocalFileClient {
	return &localFileClient{cc}
}

func (c *localFileClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, "/LocalFile.LocalFile/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalFileServer is the server API for LocalFile service.
// All implementations should embed UnimplementedLocalFileServer
// for forward compatibility
type LocalFileServer interface {
	// Read reads a file from the disk and returns it contents
	Read(context.Context, *ReadRequest) (*ReadReply, error)
}

// UnimplementedLocalFileServer should be embedded to have forward compatible implementations.
type UnimplementedLocalFileServer struct {
}

func (UnimplementedLocalFileServer) Read(context.Context, *ReadRequest) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}

// UnsafeLocalFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalFileServer will
// result in compilation errors.
type UnsafeLocalFileServer interface {
	mustEmbedUnimplementedLocalFileServer()
}

func RegisterLocalFileServer(s grpc.ServiceRegistrar, srv LocalFileServer) {
	s.RegisterService(&LocalFile_ServiceDesc, srv)
}

func _LocalFile_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalFileServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalFile.LocalFile/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalFileServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalFile_ServiceDesc is the grpc.ServiceDesc for LocalFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LocalFile.LocalFile",
	HandlerType: (*LocalFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _LocalFile_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localfile.proto",
}
