// Copyright (c) 2024 Snowflake Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: tcpoverrpc.proto

package tcpoverrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TCPOverRPC_Ok_FullMethodName = "/TCPOverRPC.TCPOverRPC/Ok"
)

// TCPOverRPCClient is the client API for TCPOverRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TCPOverRPCClient interface {
	// Ok signals if the target is reachable.
	Ok(ctx context.Context, in *HostTCPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tCPOverRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTCPOverRPCClient(cc grpc.ClientConnInterface) TCPOverRPCClient {
	return &tCPOverRPCClient{cc}
}

func (c *tCPOverRPCClient) Ok(ctx context.Context, in *HostTCPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TCPOverRPC_Ok_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TCPOverRPCServer is the server API for TCPOverRPC service.
// All implementations should embed UnimplementedTCPOverRPCServer
// for forward compatibility
type TCPOverRPCServer interface {
	// Ok signals if the target is reachable.
	Ok(context.Context, *HostTCPRequest) (*emptypb.Empty, error)
}

// UnimplementedTCPOverRPCServer should be embedded to have forward compatible implementations.
type UnimplementedTCPOverRPCServer struct {
}

func (UnimplementedTCPOverRPCServer) Ok(context.Context, *HostTCPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ok not implemented")
}

// UnsafeTCPOverRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TCPOverRPCServer will
// result in compilation errors.
type UnsafeTCPOverRPCServer interface {
	mustEmbedUnimplementedTCPOverRPCServer()
}

func RegisterTCPOverRPCServer(s grpc.ServiceRegistrar, srv TCPOverRPCServer) {
	s.RegisterService(&TCPOverRPC_ServiceDesc, srv)
}

func _TCPOverRPC_Ok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostTCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCPOverRPCServer).Ok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TCPOverRPC_Ok_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCPOverRPCServer).Ok(ctx, req.(*HostTCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TCPOverRPC_ServiceDesc is the grpc.ServiceDesc for TCPOverRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TCPOverRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TCPOverRPC.TCPOverRPC",
	HandlerType: (*TCPOverRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ok",
			Handler:    _TCPOverRPC_Ok_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcpoverrpc.proto",
}
